// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.8.22"
    ext.dokka_version = "1.9.0"
    ext.agp_version = "7.3.1"
    ext.gms_version = "4.3.15"
    ext.nexus_publish_version = "2.0.0"

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "com.google.gms:google-services:$gms_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "$nexus_publish_version"
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url = uri("https://artifactory-external.vkpartner.ru/artifactory/maven")
        }
        maven { url 'https://developer.huawei.com/repo/' }
    }
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty('android')) {
            project.android {
                buildFeatures {
                    buildConfig = true
                }
                buildTypes {
                    configureEach {
                        buildConfigField("String", "AFFISE_VERSION", "\"$affiseVersion\"")
                    }
                }
            }
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

ext {
    affiseVersion = "1.6.50"

    compose_compiler_version = "1.4.8"
    compose_bom = "2024.06.00"
    firebase = "24.0.0"
    activityCompose = "1.9.0"

    installReferrerVersion = "2.2"
    billingVersion = "7.0.0"

    rustoreInstallReferrerVersion = "6.1.0"
    huaweiInstallReferrerVersion = "3.4.30.307"

    testJunit = "4.13.2"
    testAndroidxJunit = "1.2.1"
    testEspressoCore = "3.6.1"
    testMockk = "1.12.0"
    testTruth = "1.1.3"
    testJson = "20210307"

    jvmVersion = "1.8"

    nexusServiceUrl = "https://s01.oss.sonatype.org/service/local/"
    releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

    ossrhUsername = env("OSSRH_USERNAME", "")
    ossrhPassword = env("OSSRH_PASSWORD", "")
    signingKey = env("SIGNING_KEY", "")
    signingKeyId = env("SIGNING_KEY_ID", "")
    signingPassword = env("SIGNING_PASSWORD", "")
    snapshot = env("SNAPSHOT", "false").toBoolean()
}

group = "com.affise"
version = asSnapshot(affiseVersion, snapshot)

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("$nexusServiceUrl"))
            snapshotRepositoryUrl.set(uri("$snapshotsRepoUrl"))

            username = ossrhUsername
            password = ossrhPassword
        }
    }
}

def env(String key, defaultValue) {
    var value = System.getenv(key)
    if (value != null) return value
    value = localProp(key)
    if (value != null) return value
    return defaultValue
}

def localProp(String key) {
    var localPropertiesFile = project.rootProject.file('local.properties')
    if (!localPropertiesFile.exists()) return null
    var properties = new Properties()
    try {
        localPropertiesFile.withReader('UTF-8') { reader ->
            properties.load(reader)
        }
        return properties.getProperty(key)
    } catch(ignored) { }
    return null
}

static def asSnapshot(String version, boolean value) {
    var result = version
    if (value && !result.endsWith('SNAPSHOT')) {
        result += "-SNAPSHOT"
    }
    return result
}