import java.text.SimpleDateFormat

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka' version "$dokkaVersion"
}

android {
    namespace 'com.affise.attribution'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 4
        versionName "$affiseVersion build (${buildTime()})"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        all {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
    }
}

dependencies {
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //Installreferrer
    implementation "com.android.installreferrer:installreferrer:2.2"

    //Tests
    androidTestImplementation "androidx.test.espresso:espresso-core:$testEspressoCore"
    androidTestImplementation "androidx.test.ext:junit:$testAndroidxJunit"
    testImplementation "com.google.truth:truth:$testTruth"
    testImplementation "io.mockk:mockk:$testMockk"
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation "junit:junit:$testJunit"
    testImplementation 'org.json:json:20210307'
}

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

static def buildTime() {
    def df = new SimpleDateFormat("dd-MM-yyyy HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

def localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    Properties prop = new Properties()
    new FileInputStream(localPropsFile).withCloseable { is ->
        prop.load(is)
    }
    prop.each { name, value ->
        ext[name] = value
    }
}

task androidJavadocsJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.affise'
                artifactId = 'attribution'
                version = "$affiseVersion"

                artifact androidJavadocsJar
                artifact androidSourcesJar

                pom {
                    name = 'attribution'
                    description = 'Affise Attribution Library'
                    url = 'https://affise.com/'

                    licenses {
                        license {
                            name = 'MIT license'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com:affise/sdk-android.git'
                        developerConnection = 'scm:git:ssh://github.com:affise/sdk-android.git'
                        url = 'https://github.com/affise/sdk-android'
                    }
                    developers {
                        developer {
                            name = 'Sergey Korney'
                            email = 's.korney@affise.com'
                        }
                    }
                }
            }
        }

        repositories {
           maven {
               if (project.hasProperty("mvnSnapshot") && mvnSnapshot.toBoolean()) {
                   url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
               } else {
                   url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
               }

               if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
                   credentials{
                       username sonatypeUsername
                       password sonatypePassword
                   }
               }
           }
        }
    }
}

signing {
    if (project.hasProperty("signingKeyId") && project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign publishing.publications
    }
}
